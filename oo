<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskMaster Pro - Advanced Todo List</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            position: relative;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 10px;
            font-size: 2.5em;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1em;
        }

        .input-section {
            background: rgba(255, 255, 255, 0.8);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .input-row {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: center;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .input-group label {
            font-size: 12px;
            color: #666;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        #todoInput {
            flex: 1;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
        }

        #todoInput:focus {
            border-color: #667eea;
            box-shadow: 0 0 10px rgba(102, 126, 234, 0.3);
        }

        #categorySelect, #prioritySelect, #dueDateInput, #dueTimeInput {
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            outline: none;
            transition: all 0.3s ease;
            background: white;
        }

        #categorySelect:focus, #prioritySelect:focus, #dueDateInput:focus, #dueTimeInput:focus {
            border-color: #667eea;
            box-shadow: 0 0 5px rgba(102, 126, 234, 0.3);
        }

        #addBtn {
            padding: 15px 25px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        #addBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e0e0e0;
            background: white;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .search-box {
            flex: 1;
            min-width: 200px;
            padding: 8px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 20px;
            font-size: 14px;
            outline: none;
        }

        .search-box:focus {
            border-color: #667eea;
        }

        #todoList {
            list-style: none;
        }

        .todo-item {
            background: white;
            margin: 15px 0;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border-left: 4px solid #667eea;
            position: relative;
        }

        .todo-item:hover {
            transform: translateX(5px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .todo-item.completed {
            opacity: 0.7;
            border-left-color: #4caf50;
        }

        .todo-item.completed .todo-text {
            text-decoration: line-through;
        }

        .todo-item.high-priority {
            border-left-color: #f44336;
        }

        .todo-item.medium-priority {
            border-left-color: #ff9800;
        }

        .todo-item.low-priority {
            border-left-color: #4caf50;
        }

        .todo-item.overdue {
            background: linear-gradient(135deg, #ffebee, #fff);
            border-left-color: #f44336;
        }

        .todo-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }

        .todo-text {
            font-size: 16px;
            color: #333;
            font-weight: 500;
            margin-bottom: 5px;
        }

        .todo-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
            font-size: 12px;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 3px;
            padding: 4px 8px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 12px;
            color: #667eea;
        }

        .category-tag {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .priority-high { background: linear-gradient(135deg, #f44336, #d32f2f); }
        .priority-medium { background: linear-gradient(135deg, #ff9800, #f57c00); }
        .priority-low { background: linear-gradient(135deg, #4caf50, #388e3c); }

        .todo-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .action-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .complete-btn {
            background: #4caf50;
            color: white;
        }

        .complete-btn:hover {
            background: #45a049;
            transform: scale(1.05);
        }

        .edit-btn {
            background: #2196f3;
            color: white;
        }

        .edit-btn:hover {
            background: #1976d2;
            transform: scale(1.05);
        }

        .delete-btn {
            background: #f44336;
            color: white;
        }

        .delete-btn:hover {
            background: #d32f2f;
            transform: scale(1.05);
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .empty-state {
            text-align: center;
            color: #666;
            font-style: italic;
            margin: 40px 0;
            padding: 40px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 12px;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            transition: width 0.3s ease;
        }

        .time-info {
            font-size: 11px;
            color: #999;
            margin-top: 5px;
        }

        .overdue-badge {
            background: #f44336;
            color: white;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: bold;
        }

        .due-soon-badge {
            background: #ff9800;
            color: white;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: bold;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 20px;
            }

            .input-row {
                flex-direction: column;
                align-items: stretch;
            }

            .filters {
                flex-direction: column;
                align-items: stretch;
            }

            .todo-header {
                flex-direction: column;
                gap: 10px;
            }

            .stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Dark mode styles */
        @media (prefers-color-scheme: dark) {
            .container {
                background: rgba(30, 30, 30, 0.95);
                color: #fff;
            }

            .todo-item {
                background: rgba(50, 50, 50, 0.9);
                color: #fff;
            }

            .input-section {
                background: rgba(50, 50, 50, 0.5);
            }

            #todoInput, #categorySelect, #prioritySelect, #dueDateInput, #dueTimeInput {
                background: rgba(60, 60, 60, 0.9);
                color: #fff;
                border-color: #555;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 TaskMaster Pro</h1>
        <p class="subtitle">Advanced Todo List with Smart Features</p>
        
        <div class="input-section">
            <div class="input-row">
                <div class="input-group" style="flex: 1;">
                    <label for="todoInput">Task Description</label>
                    <input type="text" id="todoInput" placeholder="What needs to be done?" maxlength="200">
                </div>
            </div>
            
            <div class="input-row">
                <div class="input-group">
                    <label for="categorySelect">Category</label>
                    <select id="categorySelect">
                        <option value="personal">🏠 Personal</option>
                        <option value="work">💼 Work</option>
                        <option value="health">🏥 Health</option>
                        <option value="education">📚 Education</option>
                        <option value="shopping">🛒 Shopping</option>
                        <option value="finance">💰 Finance</option>
                        <option value="travel">✈️ Travel</option>
                        <option value="hobby">🎨 Hobby</option>
                    </select>
                </div>
                
                <div class="input-group">
                    <label for="prioritySelect">Priority</label>
                    <select id="prioritySelect">
                        <option value="low">🟢 Low</option>
                        <option value="medium">🟡 Medium</option>
                        <option value="high">🔴 High</option>
                    </select>
                </div>
                
                <div class="input-group">
                    <label for="dueDateInput">Due Date</label>
                    <input type="date" id="dueDateInput">
                </div>
                
                <div class="input-group">
                    <label for="dueTimeInput">Due Time</label>
                    <input type="time" id="dueTimeInput">
                </div>
                
                <button id="addBtn">Add Task</button>
            </div>
        </div>

        <div class="filters">
            <button class="filter-btn active" data-filter="all">All Tasks</button>
            <button class="filter-btn" data-filter="pending">Pending</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
            <button class="filter-btn" data-filter="overdue">Overdue</button>
            <button class="filter-btn" data-filter="today">Due Today</button>
            <input type="text" class="search-box" id="searchInput" placeholder="Search tasks...">
        </div>

        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>

        <ul id="todoList"></ul>

        <div class="empty-state" id="emptyState">
            🎯 No tasks yet! Add your first task above to get started.
        </div>

        <div class="stats" id="stats" style="display: none;">
            <div class="stat-card">
                <div class="stat-number" id="totalTasks">0</div>
                <div class="stat-label">Total Tasks</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="completedTasks">0</div>
                <div class="stat-label">Completed</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="pendingTasks">0</div>
                <div class="stat-label">Pending</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="overdueTasks">0</div>
                <div class="stat-label">Overdue</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="completionRate">0%</div>
                <div class="stat-label">Completion Rate</div>
            </div>
        </div>
    </div>

    <script>
        class TaskMasterPro {
            constructor() {
                this.todos = this.loadTodos();
                this.currentFilter = 'all';
                this.searchTerm = '';
                this.initElements();
                this.initEventListeners();
                this.render();
                this.setDefaultDateTime();
            }

            initElements() {
                this.todoInput = document.getElementById('todoInput');
                this.categorySelect = document.getElementById('categorySelect');
                this.prioritySelect = document.getElementById('prioritySelect');
                this.dueDateInput = document.getElementById('dueDateInput');
                this.dueTimeInput = document.getElementById('dueTimeInput');
                this.addBtn = document.getElementById('addBtn');
                this.todoList = document.getElementById('todoList');
                this.emptyState = document.getElementById('emptyState');
                this.stats = document.getElementById('stats');
                this.searchInput = document.getElementById('searchInput');
                this.progressFill = document.getElementById('progressFill');
            }

            initEventListeners() {
                this.addBtn.addEventListener('click', () => this.addTodo());
                this.todoInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addTodo();
                });

                // Filter buttons
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                        e.target.classList.add('active');
                        this.currentFilter = e.target.dataset.filter;
                        this.render();
                    });
                });

                // Search
                this.searchInput.addEventListener('input', (e) => {
                    this.searchTerm = e.target.value.toLowerCase();
                    this.render();
                });
            }

            setDefaultDateTime() {
                const today = new Date();
                const tomorrow = new Date(today);
                tomorrow.setDate(tomorrow.getDate() + 1);
                
                this.dueDateInput.value = tomorrow.toISOString().split('T')[0];
                this.dueTimeInput.value = '09:00';
            }

            addTodo() {
                const text = this.todoInput.value.trim();
                if (text === '') return;

                const todo = {
                    id: Date.now(),
                    text: text,
                    category: this.categorySelect.value,
                    priority: this.prioritySelect.value,
                    dueDate: this.dueDateInput.value,
                    dueTime: this.dueTimeInput.value,
                    completed: false,
                    createdAt: new Date().toISOString(),
                    completedAt: null
                };

                this.todos.push(todo);
                this.saveTodos();
                this.clearForm();
                this.render();
            }

            clearForm() {
                this.todoInput.value = '';
                this.categorySelect.value = 'personal';
                this.prioritySelect.value = 'low';
                this.setDefaultDateTime();
            }

            toggleTodo(id) {
                this.todos = this.todos.map(todo => {
                    if (todo.id === id) {
                        return {
                            ...todo,
                            completed: !todo.completed,
                            completedAt: !todo.completed ? new Date().toISOString() : null
                        };
                    }
                    return todo;
                });
                this.saveTodos();
                this.render();
            }

            editTodo(id) {
                const todo = this.todos.find(t => t.id === id);
                if (!todo) return;

                const newText = prompt('Edit task:', todo.text);
                if (newText !== null && newText.trim() !== '') {
                    this.todos = this.todos.map(t => 
                        t.id === id ? { ...t, text: newText.trim() } : t
                    );
                    this.saveTodos();
                    this.render();
                }
            }

            deleteTodo(id) {
                if (confirm('Are you sure you want to delete this task?')) {
                    this.todos = this.todos.filter(todo => todo.id !== id);
                    this.saveTodos();
                    this.render();
                }
            }

            loadTodos() {
                const saved = localStorage.getItem('taskmaster-todos');
                return saved ? JSON.parse(saved) : [];
            }

            saveTodos() {
                localStorage.setItem('taskmaster-todos', JSON.stringify(this.todos));
            }

            isOverdue(todo) {
                if (!todo.dueDate) return false;
                const now = new Date();
                const dueDateTime = new Date(`${todo.dueDate}T${todo.dueTime || '23:59'}`);
                return dueDateTime < now && !todo.completed;
            }

            isDueToday(todo) {
                if (!todo.dueDate) return false;
                const today = new Date().toISOString().split('T')[0];
                return todo.dueDate === today;
            }

            isDueSoon(todo) {
                if (!todo.dueDate) return false;
                const now = new Date();
                const dueDateTime = new Date(`${todo.dueDate}T${todo.dueTime || '23:59'}`);
                const timeDiff = dueDateTime - now;
                const hoursDiff = timeDiff / (1000 * 60 * 60);
                return hoursDiff > 0 && hoursDiff <= 24;
            }

            formatDateTime(dateString, timeString) {
                if (!dateString) return '';
                const date = new Date(dateString);
                const options = { 
                    month: 'short', 
                    day: 'numeric',
                    year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
                };
                let formatted = date.toLocaleDateString('en-US', options);
                
                if (timeString) {
                    const [hours, minutes] = timeString.split(':');
                    const time = new Date();
                    time.setHours(parseInt(hours), parseInt(minutes));
                    formatted += ` at ${time.toLocaleTimeString('en-US', { 
                        hour: 'numeric', 
                        minute: '2-digit' 
                    })}`;
                }
                
                return formatted;
            }

            getFilteredTodos() {
                let filtered = this.todos;

                // Apply search filter
                if (this.searchTerm) {
                    filtered = filtered.filter(todo => 
                        todo.text.toLowerCase().includes(this.searchTerm) ||
                        todo.category.toLowerCase().includes(this.searchTerm)
                    );
                }

                // Apply status filter
                switch (this.currentFilter) {
                    case 'pending':
                        filtered = filtered.filter(todo => !todo.completed);
                        break;
                    case 'completed':
                        filtered = filtered.filter(todo => todo.completed);
                        break;
                    case 'overdue':
                        filtered = filtered.filter(todo => this.isOverdue(todo));
                        break;
                    case 'today':
                        filtered = filtered.filter(todo => this.isDueToday(todo));
                        break;
                }

                // Sort by priority and due date
                return filtered.sort((a, b) => {
                    if (a.completed !== b.completed) {
                        return a.completed ? 1 : -1;
                    }
                    
                    const priorityOrder = { high: 3, medium: 2, low: 1 };
                    const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
                    
                    if (priorityDiff !== 0) return priorityDiff;
                    
                    if (a.dueDate && b.dueDate) {
                        return new Date(a.dueDate) - new Date(b.dueDate);
                    }
                    
                    return new Date(b.createdAt) - new Date(a.createdAt);
                });
            }

            render() {
                const filteredTodos = this.getFilteredTodos();
                this.todoList.innerHTML = '';
                
                if (filteredTodos.length === 0) {
                    this.emptyState.style.display = 'block';
                    this.stats.style.display = 'none';
                    this.progressFill.style.width = '0%';
                    return;
                }

                this.emptyState.style.display = 'none';
                this.stats.style.display = 'grid';

                filteredTodos.forEach(todo => {
                    const li = document.createElement('li');
                    const isOverdue = this.isOverdue(todo);
                    const isDueSoon = this.isDueSoon(todo);
                    
                    li.className = `todo-item ${todo.completed ? 'completed' : ''} ${todo.priority}-priority ${isOverdue ? 'overdue' : ''}`;
                    
                    const categoryEmojis = {
                        personal: '🏠', work: '💼', health: '🏥', education: '📚',
                        shopping: '🛒', finance: '💰', travel: '✈️', hobby: '🎨'
                    };

                    li.innerHTML = `
                        <div class="todo-header">
                            <div>
                                <div class="todo-text">${this.escapeHtml(todo.text)}</div>
                                <div class="todo-meta">
                                    <span class="category-tag priority-${todo.priority}">
                                        ${categoryEmojis[todo.category]} ${todo.category}
                                    </span>
                                    ${todo.dueDate ? `<span class="meta-item">📅 ${this.formatDateTime(todo.dueDate, todo.dueTime)}</span>` : ''}
                                    ${isOverdue ? '<span class="overdue-badge">OVERDUE</span>' : ''}
                                    ${isDueSoon ? '<span class="due-soon-badge">DUE SOON</span>' : ''}
                                </div>
                                <div class="time-info">
                                    Created: ${new Date(todo.createdAt).toLocaleDateString()}
                                    ${todo.completedAt ? ` • Completed: ${new Date(todo.completedAt).toLocaleDateString()}` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="todo-actions">
                            <button class="action-btn complete-btn" onclick="taskMaster.toggleTodo(${todo.id})">
                                ${todo.completed ? '↩️ Undo' : '✅ Done'}
                            </button>
                            <button class="action-btn edit-btn" onclick="taskMaster.editTodo(${todo.id})">
                                ✏️ Edit
                            </button>
                            <button class="action-btn delete-btn" onclick="taskMaster.deleteTodo(${todo.id})">
                                🗑️ Delete
                            </button>
                        </div>
                    `;
                    
                    this.todoList.appendChild(li);
                });

                this.updateStats();
            }

            updateStats() {
                const total = this.todos.length;
                const completed = this.todos.filter(todo => todo.completed).length;
                const pending = total - completed;
                const overdue = this.todos.filter(todo => this.isOverdue(todo)).length;
                const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;

                document.getElementById('totalTasks').textContent = total;
                document.getElementById('completedTasks').textContent = completed;
                document.getElementById('pendingTasks').textContent = pending;
                document.getElementById('overdueTasks').textContent = overdue;
                document.getElementById('completionRate').textContent = `${completionRate}%`;

                this.progressFill.style.width = `${completionRate}%`;
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        }

        // Initialize the app
        const taskMaster = new TaskMasterPro();
    </script>
</body>
</html>
